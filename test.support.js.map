{"version":3,"sources":["test.support.js"],"names":["assert","require","symbiote","cache","ClassC","push","data","ClassB","ClassA","classA","equal","initialize","deepEqual","A","a","console","log"],"mappings":";AACA,IAAMA,SAASC,QAAS,QAAT,CAAf;AACA,IAAMC,WAAWD,QAAS,eAAT,CAAjB;;AAEA,IAAIE,QAAQ,EAAZ,C;;AAEMC,M;AACQ;AACZD,SAAME,IAAN,CAAY,QAAZ;;AAEA,IAAE,KAAKC,IAAL,GAAY,KAAKA,IAAL,IAAa,EAA3B,EAAiCD,IAAjC,CAAuC,GAAvC;;AAEA,UAAO,QAAP;AACA,G;;;AAGIE,M;AACL,mBAAc,2KAAa,C;AACd;AACZJ,SAAME,IAAN,CAAY,QAAZ;;AAEA,IAAE,KAAKC,IAAL,GAAY,KAAKA,IAAL,IAAa,EAA3B,EAAiCD,IAAjC,CAAuC,GAAvC;;AAEA,UAAO,QAAP;AACA,G,qBARmBD,M;;;AAWfI,M;AACL,mBAAc,2KAAa,C;AACd;AACZL,SAAME,IAAN,CAAY,QAAZ;;AAEA,IAAE,KAAKC,IAAL,GAAY,KAAKA,IAAL,IAAa,EAA3B,EAAiCD,IAAjC,CAAuC,GAAvC;;AAEA,UAAO,QAAP;AACA,G,qBARmBE,M;;;AAWrB,IAAIE,SAASP,SAAUM,MAAV,EAAkBD,MAAlB,EAA0BH,MAA1B,CAAb;;AAEAJ,OAAOU,KAAP,CAAgB,IAAID,MAAJ,EAAF,CAAkBE,UAAlB,EAAd,EAA+C,QAA/C,EAAyD,6BAAzD;;AAEAX,OAAOY,SAAP,CAAkBT,KAAlB,EAAyB,CAAE,QAAF,EAAY,QAAZ,EAAsB,QAAtB,CAAzB,EAA2D,qDAA3D;;AAEA,IAAIU,IAAIX,SAAUM,MAAV,CAAR;;AAEAR,OAAOU,KAAP,CAAgB,IAAIG,CAAJ,EAAF,CAAaF,UAAb,EAAd,EAA0C,QAA1C,EAAoD,6BAApD;;AAEA,IAAIG,IAAI,IAAID,CAAJ,EAAR;AACAC,EAAEH,UAAF;AACAX,OAAOY,SAAP,CAAkBE,EAAER,IAApB,EAA0B,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAA1B,EAA6C,sCAA7C;;AAEAS,QAAQC,GAAR,CAAa,IAAb","file":"test.support.js","sourcesContent":["\r\nconst assert = require( \"assert\" );\r\nconst symbiote = require( \"./symbiote.js\" );\r\n\r\nlet cache = [ ];\r\n\r\nclass ClassC{\r\n\tinitialize( ){\r\n\t\tcache.push( \"classC\" );\r\n\r\n\t\t( this.data = this.data || [ ] ).push( \"C\" );\r\n\r\n\t\treturn \"classC\";\r\n\t}\r\n}\r\n\r\nclass ClassB extends ClassC {\r\n\tconstructor( ){ super( ); }\r\n\tinitialize( ){\r\n\t\tcache.push( \"classB\" );\r\n\r\n\t\t( this.data = this.data || [ ] ).push( \"B\" )\r\n\r\n\t\treturn \"classB\";\r\n\t}\r\n}\r\n\r\nclass ClassA extends ClassB {\r\n\tconstructor( ){ super( ); }\r\n\tinitialize( ){\r\n\t\tcache.push( \"classA\" );\r\n\r\n\t\t( this.data = this.data || [ ] ).push( \"A\" )\r\n\r\n\t\treturn \"classA\";\r\n\t}\r\n}\r\n\r\nlet classA = symbiote( ClassA, ClassB, ClassC );\r\n\r\nassert.equal( ( new classA( ) ).initialize( ), \"classA\", \"should be equal to 'classA'\" );\r\n\r\nassert.deepEqual( cache, [ \"classC\", \"classB\", \"classA\" ], \"should be equal to [ 'classC', 'classB', 'classA' ]\" );\r\n\r\nlet A = symbiote( ClassA );\r\n\r\nassert.equal( ( new A( ) ).initialize( ), \"classA\", \"should be equal to 'classA'\" );\r\n\r\nlet a = new A( );\r\na.initialize( );\r\nassert.deepEqual( a.data, [ \"C\", \"B\", \"A\" ], \"should be equal to [ 'C', 'B', 'A' ]\" );\r\n\r\nconsole.log( \"ok\" );\r\n"]}